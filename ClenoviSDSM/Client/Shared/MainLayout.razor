@inherits LayoutComponentBase
@using ClenoviSDSM.Shared.Models
@using ClenoviSDSM.Client.Services
@inject IAcountService _accountService
@inject ISnackbar Snackbar

<MudThemeProvider Theme="currentTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">СДСМ-Бутел</MudText>
        <MudSpacer />
        <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" Color="Color.Inherit" />
        <AuthorizeView>
            <Authorized>
                <MudText Typo="Typo.subtitle2">@ZemiImePrezime()</MudText>
            </Authorized>
        </AuthorizeView>
        <MudTooltip Text="Смени светла/темна тема">
            <MudIconButton Icon="@Icons.Material.Filled.Brightness4" Color="Color.Inherit" OnClick="@((e) => ToggleDarkMode())" />
        </MudTooltip>
        <MudTooltip Text="Одјави се">
            <MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" OnClick="Logout" />
        </MudTooltip>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout> 
@code {

    [CascadingParameter] private Task<AuthenticationState> authState { get; set; }

    private IList<Claim> userClaim
    {
        get
        {
            var auth = authState.Result;
            if (auth.User.Identity.IsAuthenticated)
            {
                return auth.User.Claims.ToList();
            }
            return new List<Claim>();
        }
    }

    private string ZemiImePrezime()
    {
        Claim ip = userClaim.Where(_ => _.Type == "displayname").FirstOrDefault();
        return ip.Value;
    }

    protected override void OnInitialized()
    {
        currentTheme = LightTheme;
    }

    private async Task Logout()
    {
        await _accountService.LogoutAsync();
    }

    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void ToggleDarkMode()
    {
        if (currentTheme == LightTheme)
        {
            currentTheme = darkTheme;
        }
        else
        {
            currentTheme = LightTheme;
        }
    }

    MudTheme currentTheme = new MudTheme();

    MudTheme LightTheme = new MudTheme()
    {
        Palette = new Palette()
        {
            Primary = "#BD0B1D",
            AppbarBackground = "#BD0B1D"
        }
    };

    MudTheme darkTheme = new MudTheme()
    {
        Palette = new Palette()
        {
            Primary = "#BD0B1D",
            AppbarBackground = "#BD0B1D",
            Black = "#27272f",
            Background = "#32333d",
            BackgroundGrey = "#27272f",
            Surface = "#373740",
            DrawerBackground = "#27272f",
            DrawerText = "rgba(255,255,255, 0.50)",
            DrawerIcon = "rgba(255,255,255, 0.50)",
            AppbarText = "rgba(255,255,255, 0.70)",
            TextPrimary = "rgba(255,255,255, 0.70)",
            TextSecondary = "rgba(255,255,255, 0.50)",
            ActionDefault = "#adadb1",
            ActionDisabled = "rgba(255,255,255, 0.26)",
            ActionDisabledBackground = "rgba(255,255,255, 0.12)",
            Divider = "rgba(255,255,255, 0.12)",
            DividerLight = "rgba(255,255,255, 0.06)",
            TableLines = "rgba(255,255,255, 0.12)",
            LinesDefault = "rgba(255,255,255, 0.12)",
            LinesInputs = "rgba(255,255,255, 0.3)",
            TextDisabled = "rgba(255,255,255, 0.2)"
        }
    };
}