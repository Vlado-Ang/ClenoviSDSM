@page "/clenovi"

@using ClenoviSDSM.Shared.Models
@using ClenoviSDSM.Client.Services
@using ClenoviSDSM.Client.Auth
@using Microsoft.Extensions.Logging

@inject HttpClient Http
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ITokenManagerService _tokenService
@inject NavigationManager navMgr
@inject AuthenticationStateProvider customProvider
@inject ILogger<Clenovi> Logger
@inject Blazored.SessionStorage.ISyncSessionStorageService ls

@inject IExportExcelService excelService
@inject IJSRuntime js

@if (clenovi == null || rabStatusi == null || slavi == null || nacionalnosti == null)
{
    <MudOverlay Visible="true" DarkBackground="true">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </MudOverlay>
}
else
{
<MudOverlay Visible="@overlayVisible" DarkBackground="true">
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
</MudOverlay>     
<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16">
    <MudText Typo="Typo.h4" GutterBottom="true">Листа на членови</MudText>

    <MudPaper Style="background-color: #e4e4e4" Class="pa-1" Elevation="2">
        <MudExpansionPanels>
            <MudExpansionPanel>
                <TitleContent>
                    <div class="d-flex">
                        <MudIcon Icon="@Icons.Material.Filled.Search" class="mr-3"></MudIcon>
                        <MudText><strong>Пребарување...</strong></MudText>
                    </div>
                </TitleContent>
                <ChildContent>
                    <MudGrid>
                        <MudItem xs="12" sm="6" lg="3">
                            <MudTextField @bind-Value="@clFilter.Ime" Label="Име" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="@searchRodendeni" />
                        </MudItem>
                        <MudItem xs="12" sm="6" lg="3">
                            <MudTextField @bind-Value="@clFilter.Prezime" Label="Презиме" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="@searchRodendeni" />
                        </MudItem>
                        <MudItem xs="12" sm="6" lg="3">
                            <MudSelect T="string" @bind-Value="@clFilter.Pol" Label="Пол" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="@searchRodendeni">
                                <MudSelectItem Value="@("Машки")">Машки</MudSelectItem>
                                <MudSelectItem Value="@("Женски")">Женски</MudSelectItem>
                                <MudSelectItem Value="@("(Непознато)")">(Непознато)</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="6" lg="3">
                            <MudTextField @bind-Value="@clFilter.Telefon1" Label="Телефон" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="@searchRodendeni" />
                        </MudItem>
                        <MudItem xs="12" sm="6" lg="4">
                            <MudDatePicker Editable="true" @bind-Date="@clFilter.DataRagjanjeDo" Label="Датум раѓање од" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="@searchRodendeni" />
                        </MudItem>
                        <MudItem xs="12" sm="6" lg="4">
                            <MudDatePicker Editable="true" @bind-Date="@clFilter.DataRagjanjeOd" Label="Датум раѓање до" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="@searchRodendeni" />
                        </MudItem>
                        <MudItem xs="12" sm="6" lg="4">
                            <MudSelect T="string" @bind-Value="@clFilter.OpisStatus" Variant="Variant.Outlined" Label="Работен статус" Margin="Margin.Dense" Disabled="@searchRodendeni">
                                @foreach (var rs in rabStatusi)
                                {
                                    <MudSelectItem Value="@rs.OpisStatus">@rs.OpisStatus</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="6" lg="4">
                            <MudTextField @bind-Value="@clFilter.RabotenStatusOpis" Label="Работодавач" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="@searchRodendeni" />
                        </MudItem>
                        <MudItem xs="12" sm="6" lg="4">
                            <MudTextField @bind-Value="@clFilter.ObrazovnaInstitucija" Label="Образовна институција" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="@searchRodendeni" />
                        </MudItem>
                        <MudItem xs="12" sm="6" lg="4">
                            <MudTextField @bind-Value="@clFilter.IzbirackoMesto" Label="Избирачко место" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="@searchRodendeni" />
                        </MudItem>
                        <MudItem xs="12" sm="6" lg="4">
                            <MudSelect T="string" @bind-Value="@clFilter.NacOpis" Variant="Variant.Outlined" Label="Националност" Margin="Margin.Dense" Disabled="@searchRodendeni">
                                @foreach (var rs in nacionalnosti)
                                {
                                    <MudSelectItem Value="@rs.NacOpis">@rs.NacOpis</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="6" lg="4">
                            <MudSelect T="string" @bind-Value="@clFilter.SlavaOpis" Variant="Variant.Outlined" Label="Куќна слава" Margin="Margin.Dense" Disabled="@searchRodendeni">
                                @foreach (var rs in slavi)
                                {
                                    <MudSelectItem Value="@rs.SlavaOpis">@rs.SlavaOpis</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="6" lg="4" Class="d-inline-flex">
                            <MudSwitch @bind-Checked="@searchRodendeni" Color="Color.Primary" Label="Родендени" />
                            <MudSlider @bind-Value="@rodendeni" Disabled="@(searchRodendeni == true ? false : true)" Min="0" Max="14" Step="1">денес и следните @rodendeni.ToString() денови</MudSlider>
                        </MudItem>
                        <MudItem xs="12" Class="d-inline-flex justify-end">
                            <MudButton Color="Color.Warning" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ClearAll" OnClick="Clear" Class="ma-1">Исчисти</MudButton>
                            <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Search" OnClick="Search" Class="ma-1">Пребарај</MudButton>
                        </MudItem>
                    </MudGrid>
                </ChildContent>
            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudPaper>

    <MudDivider DividerType="DividerType.Middle" Class="my-6" />


    <MudTable @ref="clenoviTable" Items="@clenovi" Hover="true" Dense="true" Striped="true" SortLabel="Сорт по" Elevation="0">
        <ToolBarContent>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Custom.FileFormats.FileExcel" OnClick="DownloadExcelFile" Class="ma-1">Excel експорт</MudButton>
            <MudSpacer />
            <AuthorizeView Roles="Admin">
                <Authorized>
                    <MudContainer Class="d-flex justify-end" MaxWidth="MaxWidth.ExtraLarge">
                        <MudTooltip Text="Нов член">
                            <MudFab OnClick="@((e) => NewClen())" Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Size="Size.Medium" IconSize="Size.Medium" Class="ma-2" />
                        </MudTooltip>
                    </MudContainer>
                </Authorized>
            </AuthorizeView>
        </ToolBarContent>
        <ColGroup>
            <col />
            <col />
            <col />
            <col />
            <col />
            <col style="width:150px;" />
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Clen, object>(x => x.Ime)">Име</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Clen, object>(x => x.Prezime)">Презиме</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Clen, object>(x => x.DataRagjanje)">Дата на раѓање</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Clen, object>(x => x.OpisStatus)">Работен статус</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Clen, object>(x => x.ObrazovnaInstitucija)">Образовна институција</MudTableSortLabel></MudTh>

            <MudTh>Акции</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Име">@context.Ime</MudTd>
            <MudTd DataLabel="Презиме">@context.Prezime</MudTd>
            <MudTd DataLabel="Дата на раѓање">@string.Format("{0:dd.MM.yyyy}", context.DataRagjanje)</MudTd>
            <MudTd DataLabel="Работен статус">@context.OpisStatus</MudTd>
            <MudTd DataLabel="Образовна институција">@context.ObrazovnaInstitucija</MudTd>
            <MudTd DataLabel="">
                <AuthorizeView Roles="Admin,Editor">
                    <Authorized Context="aut">
                        <MudTooltip Text="Измени">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Info" OnClick="@(() => EditClen(@context.Id, false))" />
                        </MudTooltip>
                    </Authorized>
                </AuthorizeView>
                <AuthorizeView Roles="Admin">
                    <Authorized Context="aut">
                        <MudTooltip Text="Избриши">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Primary" OnClick="@(() => DeleteClen(@context.Id))" />
                        </MudTooltip>
                    </Authorized>
                </AuthorizeView>
                <MudTooltip Text="Види детали">
                    <MudIconButton Icon="@Icons.Material.Filled.Article" Size="Size.Small" Color="Color.Success" OnClick="@(() => EditClen(@context.Id, true))" />
                </MudTooltip>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager InfoFormat="Прикажани {first_item}-{last_item} од {all_items}" PageSizeOptions="new int[] { 5, 10, 20, 50, 100 }" RowsPerPageString="Редови по страна" HorizontalAlignment="HorizontalAlignment.Center" />
        </PagerContent>
    </MudTable>
</MudContainer>   
}



@code {
    public bool searchRodendeni { get; set; } = false;
    public int rodendeni { get; set; }
    public bool overlayVisible { get; set; } = false;

    private IEnumerable<Clen> clenovi;
    private IEnumerable<Clen> clenoviTmp;
    private IEnumerable<ClenExcel> clenoviExcel;

    private IEnumerable<RabotenStatus> rabStatusi;
    private IEnumerable<Slava> slavi;
    private IEnumerable<Nacionalnost> nacionalnosti;
    private IEnumerable<string> opstini;
    private MudTable<Clen> clenoviTable;
    private int tmpPage;

    private Clen clen = new Clen();

    private ClenoviFilter clFilter = new ClenoviFilter();

    private void PutToLocalStorage()
    {
        if (clFilter != null)
            ls.SetItem<ClenoviFilter>("clFilter", clFilter);
        if (clenoviTable != null)
            ls.SetItem<int>("currPage", clenoviTable.CurrentPage);
    }

    private void GetFromLocalStorage()
    {
        if(ls.ContainKey("clFilter"))
            clFilter = ls.GetItem<ClenoviFilter>("clFilter");
        if (ls.ContainKey("currPage"))
            tmpPage = ls.GetItem<int>("currPage");
        else
            tmpPage = 0;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
            clenoviTable.NavigateTo(tmpPage);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            clenoviTable.NavigateTo(tmpPage);
    }


    protected override void OnInitialized()
    {
        GetFromLocalStorage();
    }

    protected override async Task OnInitializedAsync()
    {
        rodendeni = 0;
        //GetFromLocalStorage();
        await GetAllClenovi();
        await GetRabotniStatusi();
        await GetSlavi();
        await GetNacionalnosti();

        StateHasChanged();
    }

    private async Task GetAllClenovi()
    {
        string token = await _tokenService.GetTokenAsync();
        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("bearer", token);
        var res = await Http.GetAsync("api/GetClenovi");
        if (res.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            (customProvider as CustomAuthenticationProvider).Notify();
            navMgr.NavigateTo("/");
        }
        else if (res.IsSuccessStatusCode)
        {
            clenovi = await res.Content.ReadFromJsonAsync<IEnumerable<Clen>>();
            clenoviTmp = clenovi;
            await Search();
        }
        else
        {
            Snackbar.Configuration.SnackbarVariant = Variant.Filled;
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Add("Се случи грешка при читање на членовите", Severity.Error);
        }
    }

    private async Task GetRodendeni()
    {
        string token = await _tokenService.GetTokenAsync();
        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("bearer", token);
        var res = await Http.GetAsync("api/GetRodendeni/" + rodendeni);
        if (res.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            (customProvider as CustomAuthenticationProvider).Notify();
            navMgr.NavigateTo("/");
        }
        else if (res.IsSuccessStatusCode)
        {
            clenovi = await res.Content.ReadFromJsonAsync<IEnumerable<Clen>>();
        }
        else
        {
            Snackbar.Configuration.SnackbarVariant = Variant.Filled;
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Add("Се случи грешка при читање на родендените", Severity.Error);
        }
    }

    private async Task GetAllClenoviExcel()
    {
        this.overlayVisible = true;

        string token = await _tokenService.GetTokenAsync();
        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("bearer", token);
        var res = await Http.GetAsync("api/GetClenoviExcel");
        if (res.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            (customProvider as CustomAuthenticationProvider).Notify();
            navMgr.NavigateTo("/");
        }
        else if (res.IsSuccessStatusCode)
        {
            clenoviExcel = await res.Content.ReadFromJsonAsync<IEnumerable<ClenExcel>>();
            SearchExcel();
        }
        else
        {
            Snackbar.Configuration.SnackbarVariant = Variant.Filled;
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Add("Се случи грешка при читање на членовите", Severity.Error);
        }
        this.overlayVisible = false;
    }

    private async Task GetRabotniStatusi()
    {
        string token = await _tokenService.GetTokenAsync();
        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("bearer", token);
        var res = await Http.GetAsync("api/GetRabotniStatusi");
        if (res.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            (customProvider as CustomAuthenticationProvider).Notify();
            navMgr.NavigateTo("/");
        }
        else if (res.IsSuccessStatusCode)
        {
            rabStatusi = await res.Content.ReadFromJsonAsync<IEnumerable<RabotenStatus>>();
        }
        else
        {
            Snackbar.Configuration.SnackbarVariant = Variant.Filled;
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Add("Се случи грешка при читање на работните статуси", Severity.Error);
        }
    }

    private async Task GetSlavi()
    {
        string token = await _tokenService.GetTokenAsync();
        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("bearer", token);
        var res = await Http.GetAsync("api/GetSlavi");
        if (res.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            (customProvider as CustomAuthenticationProvider).Notify();
            navMgr.NavigateTo("/");
        }
        else if (res.IsSuccessStatusCode)
        {
            slavi = await res.Content.ReadFromJsonAsync<IEnumerable<Slava>>();
        }
        else
        {
            Snackbar.Configuration.SnackbarVariant = Variant.Filled;
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Add("Се случи грешка при читање на славите", Severity.Error);
        }
    }

    private async Task GetNacionalnosti()
    {
        string token = await _tokenService.GetTokenAsync();
        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("bearer", token);
        var res = await Http.GetAsync("api/GetNacionalnosti");
        if (res.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            (customProvider as CustomAuthenticationProvider).Notify();
            navMgr.NavigateTo("/");
        }
        else if (res.IsSuccessStatusCode)
        {
            nacionalnosti = await res.Content.ReadFromJsonAsync<IEnumerable<Nacionalnost>>();
        }
        else
        {
            Snackbar.Configuration.SnackbarVariant = Variant.Filled;
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Add("Се случи грешка при читање на националностите", Severity.Error);
        }
    }

    private void Clear()
    {
        clFilter = new ClenoviFilter();
        clenovi = clenoviTmp;
        rodendeni = 0;
        searchRodendeni = false;
        PutToLocalStorage();
        StateHasChanged();
    }

    private async Task Search()
    {
        PutToLocalStorage();
        if (!searchRodendeni)
        {
            clenovi = clenoviTmp;
            if (clFilter.Ime != null && clFilter.Ime != "-")
            {
                clenovi = clenovi.Where(x => x.Ime.ToUpper().Contains(clFilter.Ime.ToUpper()));
            };
            if (clFilter.Ime == "-")
            {
                clenovi = clenovi.Where(x => String.IsNullOrEmpty(x.Ime));
            };
            if (clFilter.Prezime != null)
            {
                clenovi = clenovi.Where(x => x.Prezime.ToUpper().Contains(clFilter.Prezime.ToUpper()));
            };
            if (clFilter.Telefon1 != null && clFilter.Telefon1 != "-")
            {
                clenovi = clenovi.Where(x => x.Telefon1.Contains(clFilter.Telefon1));
            };
            if (clFilter.Telefon1 == "-")
            {
                clenovi = clenovi.Where(x => String.IsNullOrEmpty(x.Telefon1));
            };
            if (clFilter.DataRagjanjeOd != null)
            {
                clenovi = clenovi.Where(x => x.DataRagjanje <= clFilter.DataRagjanjeOd);
            };
            if (clFilter.DataRagjanjeDo != null)
            {
                clenovi = clenovi.Where(x => x.DataRagjanje >= clFilter.DataRagjanjeDo);
            };
            if (clFilter.Pol != null && clFilter.Pol != "(Непознато)")
            {
                clenovi = clenovi.Where(x => x.Pol == clFilter.Pol);
            };
            if (clFilter.Pol == "(Непознато)")
            {
                clenovi = clenovi.Where(x => String.IsNullOrEmpty(x.Pol));
            };
            if (clFilter.RabotenStatusOpis != null && clFilter.RabotenStatusOpis != "(Непознато)")
            {
                clenovi = clenovi.Where(x => x.RabotenStatusOpis == clFilter.RabotenStatusOpis);
            };
            if (clFilter.RabotenStatusOpis == "(Непознато)")
            {
                clenovi = clenovi.Where(x => String.IsNullOrEmpty(x.RabotenStatusOpis));
            };
            if (clFilter.ObrazovnaInstitucija != null && clFilter.ObrazovnaInstitucija != "-")
            {
                clenovi = clenovi.Where(x => x.ObrazovnaInstitucija.ToUpper().Contains(clFilter.ObrazovnaInstitucija.ToUpper()));
            };
            if (clFilter.ObrazovnaInstitucija == "-")
            {
                clenovi = clenovi.Where(x => String.IsNullOrEmpty(x.ObrazovnaInstitucija));
            };
            if (clFilter.OpisStatus != null && clFilter.OpisStatus != "(Непознато)")
            {
                clenovi = clenovi.Where(x => x.OpisStatus.ToUpper().Contains(clFilter.OpisStatus.ToUpper()));
            };
            if (clFilter.OpisStatus == "(Непознато)")
            {
                clenovi = clenovi.Where(x => String.IsNullOrEmpty(x.OpisStatus));
            };
            if (clFilter.SlavaOpis != null && clFilter.SlavaOpis != "(Непознато)")
            {
                clenovi = clenovi.Where(x => x.SlavaOpis == clFilter.SlavaOpis);
            };
            if (clFilter.SlavaOpis == "(Непознато)")
            {
                clenovi = clenovi.Where(x => String.IsNullOrEmpty(x.SlavaOpis));
            };
            if (clFilter.NacOpis != null && clFilter.NacOpis != "(Непознато)")
            {
                clenovi = clenovi.Where(x => x.NacOpis == clFilter.NacOpis);
            };
            if (clFilter.NacOpis == "(Непознато)")
            {
                clenovi = clenovi.Where(x => String.IsNullOrEmpty(x.NacOpis));
            };
            if (clFilter.IzbirackoMesto != null && clFilter.IzbirackoMesto != "-")
            {
                clenovi = clenovi.Where(x => x.IzbirackoMesto.ToUpper().Contains(clFilter.IzbirackoMesto.ToUpper()));
            };
            if (clFilter.IzbirackoMesto == "-")
            {
                clenovi = clenovi.Where(x => String.IsNullOrEmpty(x.IzbirackoMesto));
            };
        }
        else
        {
            await GetRodendeni();
        }
    }

    void SearchExcel()
    {
        PutToLocalStorage();
        if (clFilter.Ime != null && clFilter.Ime != "-")
        {
            clenoviExcel = clenoviExcel.Where(x => x.Ime.ToUpper().Contains(clFilter.Ime.ToUpper()));
        };
        if (clFilter.Ime == "-")
        {
            clenoviExcel = clenoviExcel.Where(x => String.IsNullOrEmpty(x.Ime));
        };
        if (clFilter.Prezime != null)
        {
            clenoviExcel = clenoviExcel.Where(x => x.Prezime.ToUpper().Contains(clFilter.Prezime.ToUpper()));
        };
        if (clFilter.Telefon1 != null && clFilter.Telefon1 != "-")
        {
            clenoviExcel = clenoviExcel.Where(x => x.Telefon1.Contains(clFilter.Telefon1));
        };
        if (clFilter.Telefon1 == "-")
        {
            clenoviExcel = clenoviExcel.Where(x => String.IsNullOrEmpty(x.Telefon1));
        };
        if (clFilter.DataRagjanjeOd != null)
        {
            clenoviExcel = clenoviExcel.Where(x => x.DataRagjanje <= clFilter.DataRagjanjeOd);
        };
        if (clFilter.DataRagjanjeDo != null)
        {
            clenoviExcel = clenoviExcel.Where(x => x.DataRagjanje >= clFilter.DataRagjanjeDo);
        };
        if (clFilter.RabotenStatusOpis != null && clFilter.RabotenStatusOpis != "-")
        {
            clenoviExcel = clenoviExcel.Where(x => x.RabotenStatusOpis.ToUpper().Contains(clFilter.RabotenStatusOpis.ToUpper()));
        };
        if (clFilter.RabotenStatusOpis == "-")
        {
            clenoviExcel = clenoviExcel.Where(x => String.IsNullOrEmpty(x.RabotenStatusOpis));
        };
        if (clFilter.ObrazovnaInstitucija != null && clFilter.ObrazovnaInstitucija != "-")
        {
            clenoviExcel = clenoviExcel.Where(x => x.ObrazovnaInstitucija.ToUpper().Contains(clFilter.ObrazovnaInstitucija.ToUpper()));
        };
        if (clFilter.ObrazovnaInstitucija == "-")
        {
            clenoviExcel = clenoviExcel.Where(x => String.IsNullOrEmpty(x.ObrazovnaInstitucija));
        };
        if (clFilter.Pol != null && clFilter.Pol != "(Непознато)")
        {
            clenoviExcel = clenoviExcel.Where(x => x.Pol == clFilter.Pol);
        };
        if (clFilter.Pol == "(Непознато)")
        {
            clenoviExcel = clenoviExcel.Where(x => String.IsNullOrEmpty(x.Pol));
        };
        if (clFilter.OpisStatus != null && clFilter.OpisStatus != "(Непознато)")
        {
            clenoviExcel = clenoviExcel.Where(x => x.OpisStatus.ToUpper().Contains(clFilter.OpisStatus.ToUpper()));
        };
        if (clFilter.OpisStatus == "(Непознато)")
        {
            clenoviExcel = clenoviExcel.Where(x => String.IsNullOrEmpty(x.OpisStatus));
        };
        if (clFilter.SlavaOpis != null && clFilter.SlavaOpis != "(Непознато)")
        {
            clenoviExcel = clenoviExcel.Where(x => x.SlavaOpis == clFilter.SlavaOpis);
        };
        if (clFilter.SlavaOpis == "(Непознато)")
        {
            clenoviExcel = clenoviExcel.Where(x => String.IsNullOrEmpty(x.SlavaOpis));
        };
        if (clFilter.NacOpis != null && clFilter.NacOpis != "(Непознато)")
        {
            clenoviExcel = clenoviExcel.Where(x => x.NacOpis == clFilter.NacOpis);
        };
        if (clFilter.NacOpis == "(Непознато)")
        {
            clenoviExcel = clenoviExcel.Where(x => String.IsNullOrEmpty(x.NacOpis));
        };
        if (clFilter.IzbirackoMesto != null && clFilter.IzbirackoMesto != "-")
        {
            clenoviExcel = clenoviExcel.Where(x => x.IzbirackoMesto.ToUpper().Contains(clFilter.IzbirackoMesto.ToUpper()));
        };
        if (clFilter.IzbirackoMesto == "-")
        {
            clenoviExcel = clenoviExcel.Where(x => String.IsNullOrEmpty(x.IzbirackoMesto));
        };
    }

    private void NewClen()
    {
        PutToLocalStorage();
        navMgr.NavigateTo("/newclen");
    }

    private void EditClen(int Id, bool ro)
    {
        PutToLocalStorage();
        string isRO;
        if (ro)
            isRO = "ro";
        else
            isRO = "rw";
        navMgr.NavigateTo($"/editclen/{Id}/{isRO}");
    }

    private async Task DeleteClen(int Id)
    {
        var parameters = new DialogParameters();
        parameters.Add("TitleIcon", Icons.Material.Filled.DeleteForever);
        parameters.Add("TitleText", "Бришење на член?");
        string[] poraka = new string[] { "Внимание!", "Членот ќе биде избришан.", "Враќање назад не е можно." };

        parameters.Add("ContentText", poraka);
        parameters.Add("CancelButtonText", "Откажи");
        parameters.Add("OKButtonText", "Избриши");

        DialogOptions opt = new DialogOptions() { DisableBackdropClick = true, MaxWidth = MaxWidth.Large };
        var dialog = DialogService.Show<MsgBox>("Бриши член", parameters, opt);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            string token = await _tokenService.GetTokenAsync();
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("bearer", token);

            var res = await Http.DeleteAsync("api/DeleteClen/" + Id);

            if (res.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                (customProvider as CustomAuthenticationProvider).Notify();
                navMgr.NavigateTo("/");
            }
            else if (res.IsSuccessStatusCode)
            {
                Snackbar.Configuration.SnackbarVariant = Variant.Filled;
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
                Snackbar.Add("Успешно избришан член", Severity.Success);
                await GetAllClenovi();
            }
            else
            {
                Snackbar.Configuration.SnackbarVariant = Variant.Filled;
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
                Snackbar.Add("Се случи грешка при бришење на член", Severity.Error);
            }

        }
    }

    private async Task DownloadExcelFile()
    {
        await GetAllClenoviExcel();
        var excelBytes = excelService.GenerateExcelWorkbook(clenoviExcel.ToList());
        await js.InvokeVoidAsync("saveAsFile", $"Clenovi_{DateTime.Now.ToString("yyyyMMdd_HHmmss")}.xlsx", Convert.ToBase64String(excelBytes));
    }
}
